function elSetup(winWidth,winHeight,SCREEN_WIDTH,SCREEN_HEIGHT,IS_CALIB_RIGHT,DOMINANT_EYE)
% SET UP TRACKER CONFIGURATION
%call this from any code after initialization (e.g. el=EyelinkInitDefaults(window);  )
%and opening file Eyelink('Openfile'....);
%based on EyelinkPictureCustomCalibration
%Roy Amit, fall 2014

% Setting the proper recording resolution, proper calibration type,
% as well as the data file content;

%Eyelink('command', 'add_file_preamble_text ''my_exp_name''');

%% screen_pixel_coords
% This command is crucial to map the gaze positions from the tracker to
% screen pixel positions to determine fixation
Eyelink('command','screen_pixel_coords = %ld %ld %ld %ld', 0, 0, winWidth-1, winHeight-1);
Eyelink('message', 'DISPLAY_COORDS %ld %ld %ld %ld', 0, 0, winWidth-1, winHeight-1);

%% screen_phys_coords
%screen_phys_coords given in mm
%The distance between center and middle of each edge of the display
%(left,top,right,bottom).
Eyelink('command','screen_phys_coords = %ld %ld %ld %ld', -((SCREEN_WIDTH*10)/2),(SCREEN_HEIGHT*10)/2,(SCREEN_WIDTH*10)/2, -((SCREEN_HEIGHT*10)/2));

%% eye tracked 
%binocular_enabled
Eyelink('command', 'binocular_enabled = no');
%active_eye
switch DOMINANT_EYE
    case 'R'
        Eyelink('command','active_eye = RIGHT');
    case 'L'
        Eyelink('command','active_eye = LEFT');
end

%% calibration targets
% set calibration type
Eyelink('command', 'generate_default_targets = NO');

Eyelink('command', 'calibration_type = 9');
%Eyelink('command','calibration_samples = 9');
%Eyelink('command','calibration_sequence = 0,1,2,3,4,5,6,7,8');
% if ~IS_CALIB_RIGHT
%             Eyelink('command','calibration_targets = %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d',...
%             round( 1/12*winWidth ), round( 1/10*winHeight ),  ...
%             round( 3/12*winWidth ), round( 1/10*winHeight ),  ...
%             round( 5/12*winWidth ), round( 1/10*winHeight ),  ...
%              round( 1/12*winWidth ), round( 5/10*winHeight ),  ...
%             round( 3/12*winWidth ), round( 5/10*winHeight ),  ...
%             round( 5/12*winWidth ), round( 5/10*winHeight ),  ...
%              round( 1/12*winWidth ), round( 9/10*winHeight ),  ...
%             round( 3/12*winWidth ), round( 9/10*winHeight ),  ...
%             round( 5/12*winWidth ), round( 9/10*winHeight ));
% else
% % Calib Left
%         
% %     Eyelink('command','calibration_targets = %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d',...
% %         round( 1/10*winWidth ), round( 1/10*winHeight ),  ...
% %         round( 5/10*winWidth ), round( 1/10*winHeight ),  ...
% %         round( 9/10*winWidth ), round( 1/10*winHeight ),  ...
% %         round( 1/10*winWidth ), round( 5/10*winHeight ),  ...
% %         round( 5/10*winWidth ), round( 5/10*winHeight ),  ...
% %         round( 9/10*winWidth ), round( 5/10*winHeight ),  ...
% %         round( 1/10*winWidth ), round( 9/10*winHeight ),  ...
% %         round( 5/10*winWidth ), round( 9/10*winHeight ),  ...
% %         round( 9/10*winWidth ), round( 9/10*winHeight ));
%     
% % Calib Right
%     Eyelink('command','calibration_targets = %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d',...
%         round( 7/12*winWidth ), round( 1/10*winHeight ),  ...
%         round( 9/12*winWidth ), round( 1/10*winHeight ),  ...
%         round( 11/12*winWidth ), round( 1/10*winHeight ),  ...
%         round( 7/12*winWidth ), round( 5/10*winHeight ),  ...
%         round( 9/12*winWidth ), round( 5/10*winHeight ),  ...
%         round( 11/12*winWidth ), round( 5/10*winHeight ),  ...
%         round( 7/12*winWidth ), round( 9/10*winHeight ),  ...
%         round( 9/12*winWidth ), round( 9/10*winHeight ),  ...
%         round( 11/12*winWidth ), round( 9/10*winHeight ));
%     
% end

%The order of calibration points is suposed to be defined in the following order:
%6   2   7
%4   1   5
%8   3   9
if ~IS_CALIB_RIGHT %calibration left
    Eyelink('command','calibration_targets = %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d',...
        round( 3/12*winWidth ), round( 5/10*winHeight ),  ...
        round( 3/12*winWidth ), round( 1/10*winHeight ),  ...
        round( 3/12*winWidth ), round( 9/10*winHeight ),  ...
        round( 1/12*winWidth ), round( 5/10*winHeight ),  ...
        round( 5/12*winWidth ), round( 5/10*winHeight ),  ...
        round( 1/12*winWidth ), round( 1/10*winHeight ),  ...
        round( 5/12*winWidth ), round( 1/10*winHeight ),  ...
        round( 1/12*winWidth ), round( 9/10*winHeight ),  ...      
        round( 5/12*winWidth ), round( 9/10*winHeight ));
else %calibration right
     Eyelink('command','calibration_targets = %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d',...
        round( 9/12*winWidth ), round( 5/10*winHeight ),  ...
        round( 9/12*winWidth ), round( 1/10*winHeight ),  ...
        round( 9/12*winWidth ), round( 9/10*winHeight ),  ...
        round( 7/12*winWidth ), round( 5/10*winHeight ),  ...
        round( 11/12*winWidth ), round( 5/10*winHeight ),  ...
        round( 7/12*winWidth ), round( 1/10*winHeight ),  ...
        round( 11/12*winWidth ), round( 1/10*winHeight ),  ...
        round( 7/12*winWidth ), round( 9/10*winHeight ),  ...
        round( 11/12*winWidth ), round( 9/10*winHeight ));
end
%% validation targets
%Eyelink('command', 'validation_type = HV9');
%Eyelink('command','validation_samples = 9');
%Eyelink('command','validation_sequence = 0,1,2,3,4,5,6,7,8');
% if ~IS_CALIB_RIGHT
%      Eyelink('command','validation_targets = %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d',...
%             round( 1/12*winWidth ), round( 1/10*winHeight ),  ...
%             round( 3/12*winWidth ), round( 1/10*winHeight ),  ...
%             round( 5/12*winWidth ), round( 1/10*winHeight ),  ...
%              round( 1/12*winWidth ), round( 5/10*winHeight ),  ...
%             round( 3/12*winWidth ), round( 5/10*winHeight ),  ...
%             round( 5/12*winWidth ), round( 5/10*winHeight ),  ...
%              round( 1/12*winWidth ), round( 9/10*winHeight ),  ...
%             round( 3/12*winWidth ), round( 9/10*winHeight ),  ...
%             round( 5/12*winWidth ), round( 9/10*winHeight ));
% else
% % Calib L
%          
% %     Eyelink('command','validation_targets = %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d',...
% %         round( 1/10*winWidth ), round( 1/10*winHeight ),  ...
% %         round( 5/10*winWidth ), round( 1/10*winHeight ),  ...
% %         round( 9/10*winWidth ), round( 1/10*winHeight ),  ...
% %         round( 1/10*winWidth ), round( 5/10*winHeight ),  ...
% %         round( 5/10*winWidth ), round( 5/10*winHeight ),  ...
% %         round( 9/10*winWidth ), round( 5/10*winHeight ),  ...
% %         round( 1/10*winWidth ), round( 9/10*winHeight ),  ...
% %         round( 5/10*winWidth ), round( 9/10*winHeight ),  ...
% %         round( 9/10*winWidth ), round( 9/10*winHeight ));
%     
% % Calib R
%     Eyelink('command','validation_targets = %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d',...
%         round( 7/12*winWidth ), round( 1/10*winHeight ),  ...
%         round( 9/12*winWidth ), round( 1/10*winHeight ),  ...
%         round( 11/12*winWidth ), round( 1/10*winHeight ),  ...
%         round( 7/12*winWidth ), round( 5/10*winHeight ),  ...
%         round( 9/12*winWidth ), round( 5/10*winHeight ),  ...
%         round( 11/12*winWidth ), round( 5/10*winHeight ),  ...
%         round( 7/12*winWidth ), round( 9/10*winHeight ),  ...
%         round( 9/12*winWidth ), round( 9/10*winHeight ),  ...
%         round( 11/12*winWidth ), round( 9/10*winHeight ));
% %     
% end

%The order of validation points is suposed to be defined in the following order:
%6   2   7
%4   1   5
%8   3   9
if ~IS_CALIB_RIGHT %calibration left
    Eyelink('command','validation_targets = %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d',...
        round( 3/12*winWidth ), round( 5/10*winHeight ),  ...
        round( 3/12*winWidth ), round( 1/10*winHeight ),  ...
        round( 3/12*winWidth ), round( 9/10*winHeight ),  ...
        round( 1/12*winWidth ), round( 5/10*winHeight ),  ...
        round( 5/12*winWidth ), round( 5/10*winHeight ),  ...
        round( 1/12*winWidth ), round( 1/10*winHeight ),  ...
        round( 5/12*winWidth ), round( 1/10*winHeight ),  ...
        round( 1/12*winWidth ), round( 9/10*winHeight ),  ...      
        round( 5/12*winWidth ), round( 9/10*winHeight ));
else %calibration right
     Eyelink('command','validation_targets = %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d, %d %d',...
        round( 9/12*winWidth ), round( 5/10*winHeight ),  ...
        round( 9/12*winWidth ), round( 1/10*winHeight ),  ...
        round( 9/12*winWidth ), round( 9/10*winHeight ),  ...
        round( 7/12*winWidth ), round( 5/10*winHeight ),  ...
        round( 11/12*winWidth ), round( 5/10*winHeight ),  ...
        round( 7/12*winWidth ), round( 1/10*winHeight ),  ...
        round( 11/12*winWidth ), round( 1/10*winHeight ),  ...
        round( 7/12*winWidth ), round( 9/10*winHeight ),  ...
        round( 11/12*winWidth ), round( 9/10*winHeight ));
end

%% parser
% set parser (conservative saccade thresholds)
Eyelink('command', 'saccade_velocity_threshold = 35');
Eyelink('command', 'saccade_acceleration_threshold = 9500');


%% EDF file contents
% set EDF file contents
% 5.1 retrieve tracker version and tracker software version
%[v,vs] = Eyelink('GetTrackerVersion');
%fprintf('Running experiment on a ''%s'' tracker.\n', vs );
%vsn = regexp(vs,'\d','match');

% if v == 3 && str2double(vsn{1}) == 4 % if EL 1000 and tracker version 4.xx
%     
%     % remote mode possible add HTARGET ( head target)
%     Eyelink('command', 'file_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT');
%     Eyelink('command', 'file_sample_data  = LEFT,RIGHT,GAZE,HREF,AREA,GAZERES,STATUS,INPUT,HTARGET');
%     % set link data (used for gaze cursor)
%     Eyelink('command', 'link_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,FIXUPDATE,INPUT');
%     Eyelink('command', 'link_sample_data  = LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT,HTARGET');
% else
%     Eyelink('command', 'file_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,FIXUPDATE,INPUT');
%     Eyelink('command', 'file_sample_data  = LEFT,RIGHT,GAZE,HREF,AREA,GAZERES,STATUS,INPUT');
%     % set link data (used for gaze cursor)
%     Eyelink('command', 'link_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,FIXUPDATE,INPUT');
%     Eyelink('command', 'link_sample_data  = LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT');
% end
 
% set EDF file contents
Eyelink('command', 'file_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,FIXUPDATE,INPUT');
Eyelink('command', 'file_sample_data  = LEFT,RIGHT,GAZE,HREF,AREA,GAZERES,STATUS,INPUT');
% set link data (used for gaze cursor)
Eyelink('command', 'link_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,FIXUPDATE,INPUT');
Eyelink('command', 'link_sample_data  = LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT');

% allow to use the big button on the eyelink gamepad to accept the
% calibration/drift correction target
%Eyelink('command', 'button_function 5 "accept_target_fixation"');

%% pupil Tracking model in camera setup screen
% if v == 3
%     % set pupil Tracking model in camera setup screen
%     % no = centroid. yes = ellipse
%     Eyelink('command', 'use_ellipse_fitter = no');
%     % set sample rate in camera setup screen
%     Eyelink('command', 'sample_rate = %d',1000);
% end

% set pupil Tracking model in camera setup screen
% no = centroid. yes = ellipse
% Eyelink('command', 'use_ellipse_fitter = no');

%% sample_rate
% set sample rate in camera setup screen
Eyelink('command', 'sample_rate = %d',1000);

%[result,reply]=Eyelink('ReadFromTracker','elcl_select_configuration');
%illumintaion power
%Eyelink('command', 'elcl_tt_power = %d',2);

%[result, reply]=Eyelink('ReadFromTracker','enable_automatic_calibration');
% if reply % reply = 1
%     fprintf('Automatic sequencing ON');
% else
%     fprintf('Automatic sequencing OFF');
% end

%% calibration settings
Eyelink('command', 'enable_automatic_calibration = no');
end